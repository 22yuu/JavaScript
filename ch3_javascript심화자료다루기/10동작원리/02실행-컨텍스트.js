/**
 * 실행 컨텍스트
 * 시작하기 전
 * - 매우 어려운 개념임
 * - 오래된 자료가 많음
 * 
 * 개인적으로 학습을 추가적으로 더 할 것을 권장
 * 
 * 실행 컨텍스트 개념이 어려운 이유는 호이스팅, arguments, this 등등 자바스크립트의 온갖 매커니즘이 다 들어가 있음
 * 그리고 심지어 자바스크립트의 Call Stack 정도는 알아야 이해가 된다.
 * 
 * 또한 오래된 자료들이 많음 -> 자바스크립트는 계속적으로 업데이트가 되며 개선된 점이 많음
 * 이러한 오래된 자료들을 맹목적으로 믿지 말 것!!! 
 * 
 * 꼭 자바스크립트 문서에서 최신 자료를 확인할 것 ... 자바스크립트 문서는 보기 매우 불편하게 되어 있음
 * 불친절하다기 보다는 어려운 개념들이 많아서 보기 힘들 수 있음... 그래도 포기하지말고 꼭 보도록 할 것 :D
 * 
 * 실행 컨텍스트
 * JavaScript가 실행되는 방식을 담고 있는 핵심 원리
 * 
 * JavaScript 엔진이 코드를 읽고 실행에 필요한 정보를 모아놓는 것
 * 
 * 실행 컨텍스트의 종류
 * - Global 전역 (GEC) this, object, 선언 전역 공간에서 사용 가능한 것들
 * - Function 함수 (FEC) 상위, this, 매개변수, args... 전역 공간이 아닌 함수 공간에서 실행 가능한 것들
 * - Eval eval 메서드 -> 거의 안 쓰임, `악마`라고도 표현하고 절대 사용하지 말라고함
 * 
 * 실행 컨텍스트의 단계 -> 복잡하지만 자바스크립트 엔진 관점에서 생각해보는 것이 좋음
 * 
 * Creation Phase (생성 단계) - JS 엔진이 함수를 호출했지만 실행이 시작되지 않은 단계
 * Execution Phase (실행 단계) - 전역 변수의 값 할당이 발생하며 코드를 실행하는 단계
 * 
 * # 생성 단계
 * 
 * 1. 전역 객체 생성
 * 2. 변수 생성
 * 3. 변수는 undefined로 초기화
 * 4. hello 함수는 메모리에 위치
 * 
 * # 실행단계
 * 1. 함수 호출시 함수 실행 컨텍스트 생성
 * 2. arguments 접근 가능
 * 3. GEC에서 생성된 환경에 접근 가능
 * 4. 만약 함수가 다른 함수 호출시 새로운 함수의 실행 컨텍스트 생성되며 반복
 */

var name = 'zero';

function hello() {
    console.log(this.name);
    console.log(name);
}

// ㄴ여기 까지 생성 단계임 hello 함수는 메모리에 위치해 있고, 아직은 생성 단계이므로 name에는 'zero'가 아닌 undefined임

hello() // 실행!!!! 여기서부터 실행단계